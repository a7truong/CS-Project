% Andy Truongclear all; close all;pkg load signal;pkg load statistics;%graphics_toolkit('fltk');% read in the stereo file[x, fs] = wavread('WhiteNoise_Org.wav');# only use half of the input signal and recorded signalx = x(1:max(size(x))/2);[y, fs] = wavread('WhiteNoise_Rec.wav');% make the array the same size if they aren't alreadyif ((max(size(x))) != (max(size(y))))  y = y(1:max(size(x)));end# compare only the middle, the beginning there might be recording errorx = x(1000:end);y = y(1000:end);t = (1:length(x))/fs;% normalizey = y/max(y);figure();subplot(2,1,1); plot(t, x); title('Input Wave');subplot(2,1,2); plot(t, y); title('Recorded Wave');% DFT of right & left channelsX = fft(x);Y = fft(y);f = (0:length(Y)-1)*fs/length(Y);% TRANSFER FUNCTION %% H = Output/Input;H = Y./X;% we only want half of the array since the other half is just a mirrorlen = length(Y);N = floor(len/2);Y = Y(1:N);ff = f(1:N);H = H(1:N);% right graphfigure();semilogx(ff, 20*log10(abs(H)));xlabel('Log Frequency (Hz)');ylabel('decibels (dB)');title('Frequency Response');%figure();%semilogx(y);%xlim([1e-2 1e5]);Tstep=.001; % 1msTwindow=0.050; % 50ms data windowNstep=ceil(Tstep*fs);    # one spectral slice every 20 msNwindow=ceil(Twindow*fs); # 100 ms data windowN=2^nextpow2(Nwindow);figure();specgram(x,N,fs,Nwindow,Nwindow-Nstep);%figure(); imagesc(20*log10(abs(S))); title('Input Signal Spectogram');axis xy;